// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`useInfiniteList-return-type-update should handle TypeScript generic usage 1`] = `
"
      import { useInfiniteList } from "@refinedev/core";

      interface IPost {
        id: number;
        title: string;
      }

      const MyComponent = () => {
        const {
          query: {
            isLoading
          },

          result: {
            data,
            hasNextPage
          }
        } = useInfiniteList<IPost>({
          resource: "posts"
        });

        return <div>Content</div>;
      };
    "
`;

exports[`useInfiniteList-return-type-update should handle only query properties 1`] = `
"
      import { useInfiniteList } from "@refinedev/core";

      const MyComponent = () => {
        const {
          query: {
            isLoading,
            error,
            fetchNextPage
          }
        } = useInfiniteList({
          resource: "posts"
        });

        return <div>Content</div>;
      };
    "
`;

exports[`useInfiniteList-return-type-update should handle only result properties 1`] = `
"
      import { useInfiniteList } from "@refinedev/core";

      const MyComponent = () => {
        const {
          result: {
            data,
            hasNextPage
          }
        } = useInfiniteList({
          resource: "posts"
        });

        return <div>Content</div>;
      };
    "
`;

exports[`useInfiniteList-return-type-update should handle renamed destructured properties 1`] = `
"
      import { useInfiniteList } from "@refinedev/core";

      const MyComponent = () => {
        const {
          query: {
            isLoading: loading
          },

          result: {
            data: posts,
            hasNextPage
          }
        } = useInfiniteList({
          resource: "posts"
        });

        return <div>Content</div>;
      };
    "
`;

exports[`useInfiniteList-return-type-update should not transform non-destructured usage 1`] = `
"
      import { useInfiniteList } from "@refinedev/core";

      const MyComponent = () => {
        const queryResult = useInfiniteList({
          resource: "posts"
        });

        return <div>{queryResult.data}</div>;
      };
    "
`;

exports[`useInfiniteList-return-type-update should preserve overtime and other non-query/result properties 1`] = `
"
      import { useInfiniteList } from "@refinedev/core";

      const MyComponent = () => {
        const {
          query: {
            isLoading
          },

          result: {
            data
          },

          overtime
        } = useInfiniteList({
          resource: "posts"
        });

        return <div>Content</div>;
      };
    "
`;

exports[`useInfiniteList-return-type-update should transform basic useInfiniteList destructuring 1`] = `
"
      import { useInfiniteList } from "@refinedev/core";

      const MyComponent = () => {
        const {
          query: {
            error,
            isLoading,
            fetchNextPage,
            isFetchingNextPage
          },

          result: {
            data,
            hasNextPage
          }
        } = useInfiniteList({
          resource: "posts"
        });

        return <div>Content</div>;
      };
    "
`;
